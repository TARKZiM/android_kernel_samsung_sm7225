# SPDX-License-Identifier: GPL-2.0
#
# kbuild file for firmware/
#

CONFIG_EXTRA_FIRMWARE_DIR="firmware"

# Create $(fwabs) from $(CONFIG_EXTRA_FIRMWARE_DIR) -- if it doesn't have a
# leading /, it's relative to $(srctree).
fwdir := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE_DIR))
fwabs := $(addprefix $(srctree)/,$(filter-out /%,$(fwdir)))$(filter /%,$(fwdir))

fw-external-y := $(subst $(quote),,$(CONFIG_EXTRA_FIRMWARE))

ifdef CONFIG_SEC_A42XQ_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_a42xq.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_SUB) += abov/a96t356_a42xq_sub.bin
else ifdef CONFIG_SEC_A42XUQ_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_a42xuq.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_SUB) += abov/a96t356_a42xuq_sub.bin
else ifdef CONFIG_SEC_GTS7XLLITE_PROJECT
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_gts7xl_main1.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_WIFI) += abov/a96t356_gts7xl_wifi1.bin
else
fw-external-$(CONFIG_SENSORS_A96T3X6) += abov/a96t356_a42xq.bin
fw-external-$(CONFIG_SENSORS_A96T3X6_SUB) += abov/a96t356_a42xq_sub.bin
endif

fw-external-$(CONFIG_TOUCHSCREEN_ZINITIX_ZT7548) += tsp_zinitix/zt7548_a42xq.bin tsp_zinitix/zt7548_a42xq_fac.bin \
							tsp_zinitix/zt7548_a42xq_kor.bin
fw-external-$(CONFIG_TOUCHSCREEN_ZINITIX_ZT7650) += tsp_zinitix/zt7650_a52xq.bin
fw-external-$(CONFIG_TOUCHSCREEN_STM_FTS5CU56A) += tsp_stm/fts5cu56a_a52xq.bin
fw-external-$(CONFIG_TOUCHSCREEN_HIMAX_IC_HX83102) += tsp_himax/hx83102e_gta4xl.bin
fw-external-$(CONFIG_TOUCHSCREEN_HIMAX_IC_HX83121) += tsp_himax/hx83121a_gts7xllite.bin
fw-external-$(CONFIG_KEYBOARD_STM32_POGO) += keyboard_stm/stm32_gts7llite.bin

fw-external-$(CONFIG_EPEN_WACOM_WEZ01) += epen/wez01_gts7xllite_00.bin epen/wez01_gts7xllite.bin

# FIVE
ifeq ($(CONFIG_FIVE_TEE_DRIVER),y)
include $(srctree)/firmware/five/Makefile
endif

quiet_cmd_fwbin = MK_FW   $@
      cmd_fwbin = FWNAME="$(patsubst firmware/%.gen.S,%,$@)";		     \
		  FWSTR="$(subst /,_,$(subst .,_,$(subst -,_,$(patsubst	     \
				firmware/%.gen.S,%,$@))))";		     \
		  ASM_WORD=$(if $(CONFIG_64BIT),.quad,.long);		     \
		  ASM_ALIGN=$(if $(CONFIG_64BIT),3,2);			     \
		  PROGBITS=$(if $(CONFIG_ARM),%,@)progbits;		     \
		  echo "/* Generated by firmware/Makefile */"		> $@;\
		  echo "    .section .rodata"				>>$@;\
		  echo "    .p2align 4"					>>$@;\
		  echo "_fw_$${FWSTR}_bin:"				>>$@;\
		  echo "    .incbin \"$(2)\""				>>$@;\
		  echo "_fw_end:"					>>$@;\
		  echo "   .section .rodata.str,\"aMS\",$${PROGBITS},1"	>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "_fw_$${FWSTR}_name:"				>>$@;\
		  echo "    .string \"$$FWNAME\""			>>$@;\
		  echo "    .section .builtin_fw,\"a\",$${PROGBITS}"	>>$@;\
		  echo "    .p2align $${ASM_ALIGN}"			>>$@;\
		  echo "    $${ASM_WORD} _fw_$${FWSTR}_name"		>>$@;\
		  echo "    $${ASM_WORD} _fw_$${FWSTR}_bin"		>>$@;\
		  echo "    $${ASM_WORD} _fw_end - _fw_$${FWSTR}_bin"	>>$@;

# One of these files will change, or come into existence, whenever
# the configuration changes between 32-bit and 64-bit. The .S files
# need to change when that happens.
wordsize_deps := $(wildcard include/config/64bit.h include/config/32bit.h \
		include/config/ppc32.h include/config/ppc64.h \
		include/config/superh32.h include/config/superh64.h \
		include/config/x86_32.h include/config/x86_64.h \
		firmware/Makefile)

$(patsubst %,$(obj)/%.gen.S, $(fw-external-y)): %: $(wordsize_deps)
	$(call cmd,fwbin,$(fwabs)/$(patsubst $(obj)/%.gen.S,%,$@))

# The .o files depend on the binaries directly; the .S files don't.
$(patsubst %,$(obj)/%.gen.o, $(fw-external-y)): $(obj)/%.gen.o: $(fwdir)/%

obj-y				 += $(patsubst %,%.gen.o, $(fw-external-y))

ifeq ($(KBUILD_SRC),)
# Makefile.build only creates subdirectories for O= builds, but external
# firmware might live outside the kernel source tree
_dummy := $(foreach d,$(addprefix $(obj)/,$(dir $(fw-external-y))), $(shell [ -d $(d) ] || mkdir -p $(d)))
endif

targets := $(patsubst $(obj)/%,%, \
                                $(shell find $(obj) -name \*.gen.S 2>/dev/null))
